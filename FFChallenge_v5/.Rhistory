index <- 1:nrow(train)
testindex <- sample(index, trunc(length(index) * (100-proportions[i]) / 100 ))
testset <- train[testindex,]
i=1
index <- 1:nrow(train)
testindex <- sample(index, trunc(length(index) * (100-proportions[i]) / 100 ))
testset <- train[testindex,]
trainset <- train[-testindex,]
rand1 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand2 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand <- c(rand1, rand2)
trainset$rand_base <- sample(rand, length(trainset$gpa), replace = FALSE, prob = NULL)
model <- svm (gpa <- rand_base, data=trainset)
trainset$gpa
trainset$rand_base
calculate_svm_table <- function (variable){
for (i in 1:length(proportions) ){
print (proportions[i])
temp_table <- data.frame(nrow=num_test, ncol=2)
colnames(temp_table) <- c("score", "error")
for (j in 1:num_test){
index <- 1:nrow(train)
testindex <- sample(index, trunc(length(index) * (100-proportions[i]) / 100 ))
testset <- train[testindex,]
trainset <- train[-testindex,]
# row.names(testset) <- testset$challengeID
if (variable == "random"){
rand1 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand2 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand <- c(rand1, rand2)
trainset$rand_base <- sample(rand, length(trainset$gpa), replace = FALSE, prob = NULL)
# model <- svm (thisform, data=trainset)
model <- svm (gpa ~ rand_base, data=trainset)
testset$rand_base <- sample(rand, length(testset$gpa), replace = FALSE, prob = NULL)
} else if (variable == "test"){
model <- svm (thisform, data=trainset)
testset <- testset[!is.na(testset$cf1intyr),]
}
pred <- predict(model,testset)
tb <- table(pred = pred, true= testset$gpa )
temp_table[j,] <- c(classAgreement(tb)$diag, 1-sum(diag(tb))/sum(tb))
}
temp_table <- apply(temp_table, 2, mean)
rand_error_table[i,] <- c(proportions[i], temp_table["score"], temp_table["error"])
}
rand_error_table <- as.data.frame(rand_error_table)
return (rand_error_table)
}
rand <- calculate_svm_table ("random")
model <- svm (gpa ~ rand_base, data=trainset)
testset$rand_base <- sample(rand, length(testset$gpa), replace = FALSE, prob = NULL)
pred <- predict(model,testset)
tb <- table(pred = pred, true= testset$gpa )
testset$gpa
pred
testset$gpa
length(testset$gpa)
length(pred)
testset <- testset[!is.na(testset$gpa),]
pred <- predict(model,testset)
tb <- table(pred = pred, true= testset$gpa )
length(pred)
length(testset$gpa)
index <- 1:nrow(train)
testindex <- sample(index, trunc(length(index) * (100-proportions[i]) / 100 ))
testset <- train[testindex,]
trainset <- train[-testindex,]
rand1 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand2 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand <- c(rand1, rand2)
trainset$rand_base <- sample(rand, length(trainset$gpa), replace = FALSE, prob = NULL)
model <- svm (gpa ~ rand_base, data=trainset)
testset$rand_base <- sample(rand, length(testset$gpa), replace = FALSE, prob = NULL)
testset <- testset[!is.na(testset$gpa),]
pred <- predict(model,testset)
tb <- table(pred = pred, true= testset$gpa )
length(testset$gpa)
(testset$gpa)
length(trainset$rand_base)
length(testset$rand_base)
model <- svm (gpa ~ rand_base, data=trainset)
nrow(testset)
nrow(model)
pred <- predict(model,testset)
row.names(testset)
row.names(testset) <- row.names(testset)
train <- read_delim("dfmeans.csv", delim = ",",col_names = TRUE ) # Imputed data
train <- train[,-1]
lhs<-"gpa"
operator<-" ~ "
rhs<-paste0(  names(train[,2:1000]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
proportions <- seq(80, 90, 10)
rand_error_table <- matrix(NA,nrow=length(proportions),ncol=3)
colnames(rand_error_table) <- c("train", "score", "error")
num_test <- 1
temp_table <- data.frame(nrow=num_test, ncol=2)
colnames(temp_table) <- c("score", "error")
index <- 1:nrow(train)
testindex <- sample(index, trunc(length(index) * (100-proportions[i]) / 100 ))
testset <- train[testindex,]
i < -1
index <- 1:nrow(train)
testindex <- sample(index, trunc(length(index) * (100-proportions[i]) / 100 ))
testset <- train[testindex,]
testindex <- sample(index, trunc(length(index) * (100-proportions[i]) / 100 ))
i = 1
index <- 1:nrow(train)
testindex <- sample(index, trunc(length(index) * (100-proportions[i]) / 100 ))
testset <- train[testindex,]
trainset <- train[-testindex,]
rand1 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand2 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand <- c(rand1, rand2)
trainset$rand_base <- sample(rand, length(trainset$gpa), replace = FALSE, prob = NULL)
model <- svm (gpa ~ rand_base, data=trainset)
testset$rand_base <- sample(rand, length(testset$gpa), replace = FALSE, prob = NULL)
testset$gpa
length(testset$gpa)
setwd('/Users/myeong/git/SICSS_NYU/FFChallenge_v5/')
# background <- read_delim("background.csv", delim = ",",col_names = TRUE )
# ref <- read_delim("train.csv", delim = ",",col_names = TRUE )
metadata <- read_delim("FFMetadata20180221.csv", delim = ",",col_names = TRUE )
train <- read_delim("dfmeans.csv", delim = ",",col_names = TRUE ) # Imputed data
pred <- predict(model, testset)
tb <- table(pred = pred, true= testset$gpa )
pred <- predict(model, testset)
testset$gpa
is.na(testset) %>% sum
testset[rowSum(is.na(testset))>0,]
testset[rowSums(is.na(testset))>0,]
train <- train[train$challengeID != 3404,]
proportions <- seq(80, 90, 10)
rand_error_table <- matrix(NA,nrow=length(proportions),ncol=3)
colnames(rand_error_table) <- c("train", "score", "error")
num_test <- 1
temp_table <- data.frame(nrow=num_test, ncol=2)
colnames(temp_table) <- c("score", "error")
index <- 1:nrow(train)
testindex <- sample(index, trunc(length(index) * (100-proportions[i]) / 100 ))
testset <- train[testindex,]
trainset <- train[-testindex,]
rand1 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand2 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand <- c(rand1, rand2)
trainset$rand_base <- sample(rand, length(trainset$gpa), replace = FALSE, prob = NULL)
model <- svm (gpa ~ rand_base, data=trainset)
testset$rand_base <- sample(rand, length(testset$gpa), replace = FALSE, prob = NULL)
pred <- predict(model, testset)
tb <- table(pred = pred, true= testset$gpa )
train[train$challengeID == 3404,]
testset[rowSums(is.na(testset))>0,]
train[rowSums(is.na(train))>0,]
not.mis <- rowSums(is.na(train))==0
train <- train[not.mis,]
proportions <- seq(80, 90, 10)
rand_error_table <- matrix(NA,nrow=length(proportions),ncol=3)
colnames(rand_error_table) <- c("train", "score", "error")
num_test <- 1
temp_table <- data.frame(nrow=num_test, ncol=2)
colnames(temp_table) <- c("score", "error")
index <- 1:nrow(train)
testindex <- sample(index, trunc(length(index) * (100-proportions[i]) / 100 ))
testset <- train[testindex,]
trainset <- train[-testindex,]
rand1 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand2 <- rnorm (5000, mean(train$gpa, na.rm=TRUE), sd(train$gpa, na.rm=TRUE))
rand <- c(rand1, rand2)
trainset$rand_base <- sample(rand, length(trainset$gpa), replace = FALSE, prob = NULL)
model <- svm (gpa ~ rand_base, data=trainset)
testset$rand_base <- sample(rand, length(testset$gpa), replace = FALSE, prob = NULL)
pred <- predict(model, testset)
tb <- table(pred = pred, true= testset$gpa )
predict <- read_delim("df2means.csv", delim = ",",col_names = TRUE ) # Imputed data
predict <- predict[,-1]
model <- svm (thisform, data=train)
pred <- predict(model, predict)
not.mis <- rowSums(is.na(predict))==0
predict <- predict[not.mis,]
pred <- predict(model, predict)
final <- read_delim("prediction.csv", delim = ",",col_names = TRUE )
final <- data.frame(as.matrix(ncol=1, nrow=0))
final <- data.frame(as.matrix(ncol=1, nrow=0))
final <- as.data.frame(as.matrix(ncol=1, nrow=0))
final <- final[1:length(pred), ]
final$challengeID <- predict$challengeID
final$gpa <- pred
View(final)
pred
model <- svm (thisform, data=train)
pred <- predict(model, predict)
pred
train$gpa
lhs<-"gpa"
operator<-" ~ "
rhs<-paste0(  names(train[,2:500]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
pred
rhs<-paste0(  names(train[,2:20]),   collapse=" + ")
lhs<-"gpa"
operator<-" ~ "
rhs<-paste0(  names(train[,2:20]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
pred
train$gpa <- as.factor(train$gpa)
predict$gpa <- as.factor(train$gpa)
predict$gpa <- as.factor(predict$gpa)
model <- svm (thisform, data=train)
pred <- predict(model, predict)
pred
head(pred)
train$gpa
as.character(pred)
lhs<-"gpa"
operator<-" ~ "
rhs<-paste0(  names(train[,2:100]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
pred
rhs<-paste0(  names(train[,2:1000]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
pred
rhs<-paste0(  names(train[,2:200]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
pred
summary(pred)
rhs<-paste0(  names(train[,1000:1500]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
summary(pred)
rhs<-paste0(  names(train[,2:100]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
summary(pred)
rhs<-paste0(  names(train[,2:50]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
summary(pred)
rhs<-paste0(  names(train[,2:90]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
summary(pred)
rhs<-paste0(  names(train[,2:80]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
summary(pred)
rhs<-paste0(  names(train[,2:70]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
summary(pred)
rhs<-paste0(  names(train[,2:60]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
summary(pred)
rhs<-paste0(  names(train[,2:70]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
final <- final[1:length(pred), ]
final$challengeID <- predict$challengeID
final$gpa <- pred
View(final)
lhs<-"gpa"
lhs<-"grit"
length(levels(as.factor(train$grit)))
length(levels(as.factor(train$materialHardship)))
length(levels(as.factor(train$eviction)))
length(levels(as.factor(train$layoff)))
length(levels(as.factor(train$jobTraining)))
train$grit <- as.factor(train$grit)
predict$grit <- as.factor(predict$grit)
train$materialHardship <- as.factor(train$materialHardship)
predict$materialHardship <- as.factor(predict$materialHardship)
train$eviction <- as.factor(train$eviction)
predict$eviction <- as.factor(predict$eviction)
train$layoff <- as.factor(train$layoff)
predict$layoff <- as.factor(predict$layoff)
train$jobTraining <- as.factor(train$jobTraining)
predict$jobTraining <- as.factor(predict$jobTraining)
lhs<-"grit"
operator<-" ~ "
rhs<-paste0(  names(train[,2:70]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
final$grit <- pred
final$grit
summary(pred)
lhs<-"materialHardship"
lhs<-"materialHardship"
operator<-" ~ "
rhs<-paste0(  names(train[,2:70]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
final$materialHardship <- pred
lhs<-"eviction"
operator<-" ~ "
rhs<-paste0(  names(train[,2:70]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
final$eviction <- pred
lhs<-"layoff"
operator<-" ~ "
rhs<-paste0(  names(train[,2:70]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
final$layoff <- pred
lhs<-"layoff"
model <- svm (thisform, data=train)
pred <- predict(model, predict)
final$layoff <- pred
lhs<-"jobTraining"
operator<-" ~ "
rhs<-paste0(  names(train[,2:70]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
model <- svm (thisform, data=train)
pred <- predict(model, predict)
final$jobTraining <- pred
View(final)
write.table(final, "team1_predict.csv", row.names=F, col.names=T, sep=",")
run <- function (variable){
lhs<- variable
operator<-" ~ "
rhs<-paste0(  names(train[,2:70]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
# just for submission
model <- svm (thisform, data=train)
pred <- predict(model, predict)
final[variable] <- pred
write.table(final, paste0("NYU_team1_predict.csv"), row.names=F, col.names=T, sep=",")
}
run <- function (variable){
lhs<- variable
operator<-" ~ "
rhs<-paste0(  names(train[,2:70]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
# just for submission
model <- svm (thisform, data=train)
pred <- predict(model, predict)
final[variable] <- pred
}
run (gpa)
run ("gpa")
final$gpa <- 0
run ("gpa")
run <- function (variable){
lhs<- variable
operator<-" ~ "
rhs<-paste0(  names(train[,2:70]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
# just for submission
# model <- svm (thisform, data=train)
model <- randomForest (thisform, data=train, ntree=100, importance=TRUE, proximity=TRUE, na.action=na.omit)
pred <- predict(model, predict)
final[variable] <- pred
}
run <- function (variable){
lhs<- variable
operator<-" ~ "
rhs<-paste0(  names(train[,2:70]),   collapse=" + ")
thisform<-paste0(
lhs,
operator,
rhs
) %>% as.formula
# just for submission
# model <- svm (thisform, data=train)
model <- randomForest (thisform, data=train, ntree=100, importance=TRUE, proximity=TRUE, na.action=na.omit)
pred <- predict(model, predict)
return (pred)
}
final$gpa <- run ("gpa")
library(randomForest)
final$gpa <- run ("gpa")
summary(final$gpa)
final$grit <-run ("grit")
final$materialHardship <-run ("materialHardship")
final$eviction <-run ("eviction")
final$layoff <-run ("layoff")
final$jobTraining <-run ("jobTraining")
write.table(final, paste0("rf_NYU_team1_predict.csv"), row.names=F, col.names=T, sep=",")
ori <- read_delim("prediction_ori.csv", delim = ",",col_names = TRUE )
ids_missing <- final$challengeID %!in% ori$challengeID
'%!in%' <- function(x,y)!('%in%'(x,y))
ids_missing <- final$challengeID %!in% ori$challengeID
ids_missing <- ori[(final$challengeID %!in% ori$challengeID)==T,]$challengeID
ids_missing <- ori[(ori$challengeID %!in%  final$challengeID)==T,]$challengeID
svm <- read_delim("svm.csv", delim = ",",col_names = TRUE )
empty <- data.frame(as.matrix(ncol=7, nrow=length(ids_missing)))
empty <- data.frame(matrix(ncol=7, nrow=length(ids_missing)))
colnames(empty) <- colnames(svm)
empty$challengeID <- ids_missing
svm <- rbind(svm, empty)
write.table(svm, paste0("svm.csv"), row.names=F, col.names=T, sep=",")
rf <- read_delim("rf.csv", delim = ",",col_names = TRUE )
rf <- rbind(rf, empty)
write.table(rf, paste0("rf.csv"), row.names=F, col.names=T, sep=",")
empty[is.na(empty)] <- 0
svm <- read_delim("svm.csv", delim = ",",col_names = TRUE )
svm[is.na(svm)] <-0
View(svm)
write.table(svm, paste0("svm.csv"), row.names=F, col.names=T, sep=",")
rf <- read_delim("rf.csv", delim = ",",col_names = TRUE )
rf[is.na(rf)] <-0
write.table(rf, paste0("rf.csv"), row.names=F, col.names=T, sep=",")
